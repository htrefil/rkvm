// This is not really public API.
#![allow(async_fn_in_trait)]

pub mod auth;
pub mod message;
pub mod version;

use quinn::TransportConfig;
use rkvm_input::abs::{AbsAxis, AbsInfo};
use rkvm_input::event::Event;
use rkvm_input::key::Key;
use rkvm_input::rel::RelAxis;
use serde::{Deserialize, Serialize};
use std::borrow::Cow;
use std::collections::{HashMap, HashSet};
use std::ffi::CString;
use std::time::Duration;

#[derive(Deserialize, Serialize, Debug)]
pub struct DeviceInfo {
    // ID generated by rkvm-server.
    pub id: usize,
    pub name: CString,
    pub vendor: u16,
    pub product: u16,
    pub version: u16,
    pub rel: HashSet<RelAxis>,
    pub abs: HashMap<AbsAxis, AbsInfo>,
    pub keys: HashSet<Key>,
    pub delay: Option<i32>,
    pub period: Option<i32>,
}

#[derive(Deserialize, Serialize, Debug)]
pub struct Datagram<'a> {
    pub id: usize,
    pub events: Cow<'a, [Event]>,
}

pub fn transport_config() -> TransportConfig {
    let mut transport_config = TransportConfig::default();
    transport_config.keep_alive_interval(Some(Duration::from_millis(500)));
    transport_config.max_idle_timeout(Some(Duration::from_secs(1).try_into().unwrap()));

    transport_config
}
